package unimodel.constraints;

/*Generated by MPS */

import jetbrains.mps.core.aspects.feedback.api.BaseFeedbackDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.feedback.api.FeedbackProvider;
import jetbrains.mps.core.aspects.constraints.rules.kinds.ContainmentContext;
import jetbrains.mps.core.aspects.feedback.messages.BaseMessageProvider;
import jetbrains.mps.core.aspects.feedback.messages.FailingRuleProblemId;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.core.aspects.feedback.messages.MessageProvider;
import java.util.List;
import java.util.Collections;
import java.util.Arrays;
import java.util.stream.Stream;

public final class Address_ConstraintsFeedback extends BaseFeedbackDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x6069f38ad5c2473eL, 0xbe656672ae45792cL, 0x79555ffcb891b538L, "unimodel.structure.Address");

  private static final FeedbackProvider<ContainmentContext> MSGPROVIDER_WhenConstraintRuleFails_kacaqw_a = new BaseMessageProvider<ContainmentContext>(new FailingRuleProblemId(Address_ConstraintRules.Rule_Only_Letters_Country.ID_Only_Letters_Country)) {
    @NotNull
    @Override
    public MessageProvider.Msg yieldMessage(ContainmentContext context) {
      return new MessageProvider.StringMsg("Warning: The country can have only alphabetic letters and apostrophe");
    }
  };
  private static final FeedbackProvider<ContainmentContext> MSGPROVIDER_WhenConstraintRuleFails_kacaqw_b = new BaseMessageProvider<ContainmentContext>(new FailingRuleProblemId(Address_ConstraintRules.Rule_Only_Letters_State.ID_Only_Letters_State)) {
    @NotNull
    @Override
    public MessageProvider.Msg yieldMessage(ContainmentContext context) {
      return new MessageProvider.StringMsg("Warning: The state can have only alphabetic letters and apostrop" + "he" + "");
    }
  };
  private static final FeedbackProvider<ContainmentContext> MSGPROVIDER_WhenConstraintRuleFails_kacaqw_c = new BaseMessageProvider<ContainmentContext>(new FailingRuleProblemId(Address_ConstraintRules.Rule_Only_Letters_City.ID_Only_Letters_City)) {
    @NotNull
    @Override
    public MessageProvider.Msg yieldMessage(ContainmentContext context) {
      return new MessageProvider.StringMsg("Warning: The city can have only alphabetic letters and apostrophe");
    }
  };
  private static final FeedbackProvider<ContainmentContext> MSGPROVIDER_WhenConstraintRuleFails_kacaqw_d = new BaseMessageProvider<ContainmentContext>(new FailingRuleProblemId(Address_ConstraintRules.Rule_Post_Code_Only_Digits.ID_Post_Code_Only_Digits)) {
    @NotNull
    @Override
    public MessageProvider.Msg yieldMessage(ContainmentContext context) {
      return new MessageProvider.StringMsg("Warning: The postal code can have only digits");
    }
  };
  private static final FeedbackProvider<ContainmentContext> MSGPROVIDER_WhenConstraintRuleFails_kacaqw_e = new BaseMessageProvider<ContainmentContext>(new FailingRuleProblemId(Address_ConstraintRules.Rule_Post_Code_Length.ID_Post_Code_Length)) {
    @NotNull
    @Override
    public MessageProvider.Msg yieldMessage(ContainmentContext context) {
      return new MessageProvider.StringMsg("Warning: The postal code must be of five digits" + "");
    }
  };
  private static final FeedbackProvider<ContainmentContext> MSGPROVIDER_WhenConstraintRuleFails_kacaqw_f = new BaseMessageProvider<ContainmentContext>(new FailingRuleProblemId(Address_ConstraintRules.Rule_ID_Positive.ID_ID_Positive)) {
    @NotNull
    @Override
    public MessageProvider.Msg yieldMessage(ContainmentContext context) {
      return new MessageProvider.StringMsg("Warning: The id cannot be less than one");
    }
  };

  private static final List<FeedbackProvider> PROVIDERS = Collections.unmodifiableList(Arrays.<FeedbackProvider>asList(MSGPROVIDER_WhenConstraintRuleFails_kacaqw_a, MSGPROVIDER_WhenConstraintRuleFails_kacaqw_b, MSGPROVIDER_WhenConstraintRuleFails_kacaqw_c, MSGPROVIDER_WhenConstraintRuleFails_kacaqw_d, MSGPROVIDER_WhenConstraintRuleFails_kacaqw_e, MSGPROVIDER_WhenConstraintRuleFails_kacaqw_f));

  public Address_ConstraintsFeedback() {
    super(CONCEPT);
  }

  @NotNull
  @Override
  public Stream<FeedbackProvider> getDeclaredProviders() {
    return PROVIDERS.stream();
  }
}
