// automatically generated by Xtext
grammar it.univaq.disim.unimodel.xtext.Unimodel with org.eclipse.xtext.common.Terminals

//import "http://it.univaq.disim/unimodel" 
import "platform:/resource/it.univaq.disim.unimodel/model/unimodel.ecore"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

University returns University:
	'University'
	name=EString
	'{'
		('chancellor' chancellor=EString)?
		('description' description=EString)?
		'buildings' '{' buildings+=Building ( "," buildings+=Building)* '}' 
	'}';


Building returns Building:
	'Building'
	name=EString
	'{'
		('description' description=EString)?
		'address' address=Address
		('library' library=Library)?
		'floors' '{' floors+=Floor ( "," floors+=Floor)* '}' 
	'}';

Address returns Address:
	{Address}
	'Address'
	id=EInt
	'{'
		('country' country=EString)?
		('state' state=EString)?
		('city' city=EString)?
		('post_code' post_code=EString)?
		('street' street=EString)?
		('civic' civic=EString)?
		('phone' phone=EString)?
	'}';

Library returns Library:
	'Library'
	name=EString
	'{'
		'workstations' workstations=EInt
		'computers' computers=EInt
		('books' '{' books+=Book ( "," books+=Book)* '}' )?
		('loans' '{' loans+=Loan ( "," loans+=Loan)* '}' )?
		('person' '{' person+=Person ( "," person+=Person)* '}' )?
	'}';

Floor returns Floor:
	'Floor'
	'{'
		'number' number=EInt
		'bathrooms' bathrooms=EInt
		('rooms' '{' rooms+=Room ( "," rooms+=Room)* '}' )?
	'}';


Book returns Book:
	'Book'
	name=EString
	'{'
		'quantity' quantity=EInt
		('ISBN' ISBN=EString)?
		('author' author=EString)?
	'}';

Loan returns Loan:
	'Loan'
	'{'
		'date' date=EDate
		('book' book=[Book|EString])?
		('person' person=[Person|EString])?
	'}';

Person returns Person:
	'Person'
	name=EString
	'{'
		'category' category=Category
		('badge' badge=EString)?
		'age' age=EInt
		('fiscal_code' fiscal_code=EString)?
		('library' library=[Library|EString])?
	'}';


Room returns Room:
	Room_Impl | Office | Class;

Room_Impl returns Room:
	'Room'
	name=EString
	'{'
		'dimension' dimension=EFloat
		'sockets' sockets=EInt
	'}';


Office returns Office:
	'Office'
	name=EString
	'{'
		'dimension' dimension=EFloat
		'sockets' sockets=EInt
		'type' type=Type
		'capacity' capacity=EInt
		('phone' phone=EString)?
		'office_address' office_address=[Address|EString]
		'person_in_office' '{' person_in_office+=Person ( "," person_in_office+=Person)* '}' 
	'}';

Class returns Class:
	'Class'
	name=EString
	'{'
		'dimension' dimension=EFloat
		'sockets' sockets=EInt
		'seats' seats=EInt
		'blackboards' blackboards=EInt
		'speakers' speakers=EInt
		'computers' computers=EInt
	'}';

EInt returns ecore::EInt:
	'-'? INT;
	
EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EString returns ecore::EString:
	STRING | ID;

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

enum Category returns Category:
				PROFESSOR = 'PROFESSOR' | PHD_STUDENT = 'PHD_STUDENT' | ADMINISTRATOR = 'ADMINISTRATOR' | STAFF = 'STAFF' | STUDENT = 'STUDENT';
	
enum Type returns Type:
				PROFESSOR_OFFICE = 'PROFESSOR_OFFICE' | PHD_ROOM = 'PHD_ROOM' | ADMINISTRATION = 'ADMINISTRATION' | SECRETARIAT = 'SECRETARIAT';
