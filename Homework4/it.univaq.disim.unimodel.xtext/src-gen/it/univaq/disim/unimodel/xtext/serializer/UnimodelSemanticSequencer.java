/*
 * generated by Xtext 2.25.0
 */
package it.univaq.disim.unimodel.xtext.serializer;

import com.google.inject.Inject;
import it.univaq.disim.unimodel.xtext.services.UnimodelGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import unimodel.Address;
import unimodel.Book;
import unimodel.Building;
import unimodel.Floor;
import unimodel.Library;
import unimodel.Loan;
import unimodel.Office;
import unimodel.Person;
import unimodel.Room;
import unimodel.UnimodelPackage;
import unimodel.University;

@SuppressWarnings("all")
public class UnimodelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UnimodelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UnimodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UnimodelPackage.ADDRESS:
				sequence_Address(context, (Address) semanticObject); 
				return; 
			case UnimodelPackage.BOOK:
				sequence_Book(context, (Book) semanticObject); 
				return; 
			case UnimodelPackage.BUILDING:
				sequence_Building(context, (Building) semanticObject); 
				return; 
			case UnimodelPackage.CLASS:
				sequence_Class(context, (unimodel.Class) semanticObject); 
				return; 
			case UnimodelPackage.FLOOR:
				sequence_Floor(context, (Floor) semanticObject); 
				return; 
			case UnimodelPackage.LIBRARY:
				sequence_Library(context, (Library) semanticObject); 
				return; 
			case UnimodelPackage.LOAN:
				sequence_Loan(context, (Loan) semanticObject); 
				return; 
			case UnimodelPackage.OFFICE:
				sequence_Office(context, (Office) semanticObject); 
				return; 
			case UnimodelPackage.PERSON:
				sequence_Person(context, (Person) semanticObject); 
				return; 
			case UnimodelPackage.ROOM:
				sequence_Room_Impl(context, (Room) semanticObject); 
				return; 
			case UnimodelPackage.UNIVERSITY:
				sequence_University(context, (University) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Address returns Address
	 *
	 * Constraint:
	 *     (
	 *         id=EInt 
	 *         country=EString? 
	 *         state=EString? 
	 *         city=EString? 
	 *         post_code=EString? 
	 *         street=EString? 
	 *         civic=EString? 
	 *         phone=EString?
	 *     )
	 */
	protected void sequence_Address(ISerializationContext context, Address semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Book returns Book
	 *
	 * Constraint:
	 *     (name=EString quantity=EInt ISBN=EString? author=EString?)
	 */
	protected void sequence_Book(ISerializationContext context, Book semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Building returns Building
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         address=Address 
	 *         library=Library? 
	 *         floors+=Floor 
	 *         floors+=Floor*
	 *     )
	 */
	protected void sequence_Building(ISerializationContext context, Building semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Room returns Class
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         dimension=EFloat 
	 *         sockets=EInt 
	 *         seats=EInt 
	 *         blackboards=EInt 
	 *         speakers=EInt 
	 *         computers=EInt
	 *     )
	 */
	protected void sequence_Class(ISerializationContext context, unimodel.Class semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UnimodelPackage.Literals.NAMED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnimodelPackage.Literals.NAMED__NAME));
			if (transientValues.isValueTransient(semanticObject, UnimodelPackage.Literals.ROOM__DIMENSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnimodelPackage.Literals.ROOM__DIMENSION));
			if (transientValues.isValueTransient(semanticObject, UnimodelPackage.Literals.ROOM__SOCKETS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnimodelPackage.Literals.ROOM__SOCKETS));
			if (transientValues.isValueTransient(semanticObject, UnimodelPackage.Literals.CLASS__SEATS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnimodelPackage.Literals.CLASS__SEATS));
			if (transientValues.isValueTransient(semanticObject, UnimodelPackage.Literals.CLASS__BLACKBOARDS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnimodelPackage.Literals.CLASS__BLACKBOARDS));
			if (transientValues.isValueTransient(semanticObject, UnimodelPackage.Literals.CLASS__SPEAKERS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnimodelPackage.Literals.CLASS__SPEAKERS));
			if (transientValues.isValueTransient(semanticObject, UnimodelPackage.Literals.CLASS__COMPUTERS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnimodelPackage.Literals.CLASS__COMPUTERS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClassAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getClassAccess().getDimensionEFloatParserRuleCall_4_0(), semanticObject.getDimension());
		feeder.accept(grammarAccess.getClassAccess().getSocketsEIntParserRuleCall_6_0(), semanticObject.getSockets());
		feeder.accept(grammarAccess.getClassAccess().getSeatsEIntParserRuleCall_8_0(), semanticObject.getSeats());
		feeder.accept(grammarAccess.getClassAccess().getBlackboardsEIntParserRuleCall_10_0(), semanticObject.getBlackboards());
		feeder.accept(grammarAccess.getClassAccess().getSpeakersEIntParserRuleCall_12_0(), semanticObject.getSpeakers());
		feeder.accept(grammarAccess.getClassAccess().getComputersEIntParserRuleCall_14_0(), semanticObject.getComputers());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Floor returns Floor
	 *
	 * Constraint:
	 *     (number=EInt bathrooms=EInt (rooms+=Room rooms+=Room*)?)
	 */
	protected void sequence_Floor(ISerializationContext context, Floor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Library returns Library
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         workstations=EInt 
	 *         computers=EInt 
	 *         (books+=Book books+=Book*)? 
	 *         (loans+=Loan loans+=Loan*)? 
	 *         (person+=Person person+=Person*)?
	 *     )
	 */
	protected void sequence_Library(ISerializationContext context, Library semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Loan returns Loan
	 *
	 * Constraint:
	 *     (date=EDate book=[Book|EString]? person=[Person|EString]?)
	 */
	protected void sequence_Loan(ISerializationContext context, Loan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Room returns Office
	 *     Office returns Office
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         dimension=EFloat 
	 *         sockets=EInt 
	 *         type=Type 
	 *         capacity=EInt 
	 *         phone=EString? 
	 *         office_address=[Address|EString] 
	 *         person_in_office+=Person 
	 *         person_in_office+=Person*
	 *     )
	 */
	protected void sequence_Office(ISerializationContext context, Office semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Person
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         category=Category 
	 *         badge=EString? 
	 *         age=EInt 
	 *         fiscal_code=EString? 
	 *         library=[Library|EString]?
	 *     )
	 */
	protected void sequence_Person(ISerializationContext context, Person semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Room returns Room
	 *     Room_Impl returns Room
	 *
	 * Constraint:
	 *     (name=EString dimension=EFloat sockets=EInt)
	 */
	protected void sequence_Room_Impl(ISerializationContext context, Room semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UnimodelPackage.Literals.NAMED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnimodelPackage.Literals.NAMED__NAME));
			if (transientValues.isValueTransient(semanticObject, UnimodelPackage.Literals.ROOM__DIMENSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnimodelPackage.Literals.ROOM__DIMENSION));
			if (transientValues.isValueTransient(semanticObject, UnimodelPackage.Literals.ROOM__SOCKETS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnimodelPackage.Literals.ROOM__SOCKETS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoom_ImplAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRoom_ImplAccess().getDimensionEFloatParserRuleCall_4_0(), semanticObject.getDimension());
		feeder.accept(grammarAccess.getRoom_ImplAccess().getSocketsEIntParserRuleCall_6_0(), semanticObject.getSockets());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     University returns University
	 *
	 * Constraint:
	 *     (name=EString chancellor=EString? description=EString? buildings+=Building buildings+=Building*)
	 */
	protected void sequence_University(ISerializationContext context, University semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
